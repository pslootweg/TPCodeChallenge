package tpcc;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class QueueTest {
	
	private Queue uut;

	@Before
	public void setUpBefore() throws Exception {
		uut = new Queue();
	}
	
	@Rule
	public ExpectedException thrown = ExpectedException.none();

	@Test
	public void testEnqueue_Valid() {
		fail("Not yet implemented");
	}

	@Test
	public void testEnqueue_Invalid_IT() {
		uut.enqueue(new InstructionMessage(1, 1, 1, 0, 1));
		
		assertFalse(uut.isEmpty());
		assertEquals(1, uut.count());
	}

	@Test
	public void testEnqueue_Invalid_PC() {
		fail("Not yet implemented");
	}

	@Test
	public void testEnqueue_Invalid_Q() {
		fail("Not yet implemented");
	}

	@Test
	public void testEnqueue_Invalid_U() {
		fail("Not yet implemented");
	}

	@Test
	public void testEnqueue_Invalid_T() {
		fail("Not yet implemented");
	}

	@Test
	public void testDequeue() {
		fail("Not yet implemented");
	}

	@Test
	public void testPeek() {
		fail("Not yet implemented");
	}

	@Test
	public void testCount() {
		fail("Not yet implemented");
	}

	@Test
	public void testIsEmpty() {
		fail("Not yet implemented");
	}

}
